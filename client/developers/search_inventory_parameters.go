// Code generated by go-swagger; DO NOT EDIT.

package developers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchInventoryParams creates a new SearchInventoryParams object
// with the default values initialized.
func NewSearchInventoryParams() *SearchInventoryParams {
	var ()
	return &SearchInventoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchInventoryParamsWithTimeout creates a new SearchInventoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchInventoryParamsWithTimeout(timeout time.Duration) *SearchInventoryParams {
	var ()
	return &SearchInventoryParams{

		timeout: timeout,
	}
}

// NewSearchInventoryParamsWithContext creates a new SearchInventoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchInventoryParamsWithContext(ctx context.Context) *SearchInventoryParams {
	var ()
	return &SearchInventoryParams{

		Context: ctx,
	}
}

// NewSearchInventoryParamsWithHTTPClient creates a new SearchInventoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchInventoryParamsWithHTTPClient(client *http.Client) *SearchInventoryParams {
	var ()
	return &SearchInventoryParams{
		HTTPClient: client,
	}
}

/*SearchInventoryParams contains all the parameters to send to the API endpoint
for the search inventory operation typically these are written to a http.Request
*/
type SearchInventoryParams struct {

	/*Limit
	  maximum number of records to return

	*/
	Limit *int32
	/*SearchString
	  pass an optional search string for looking up inventory

	*/
	SearchString *string
	/*Skip
	  number of records to skip for pagination

	*/
	Skip *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search inventory params
func (o *SearchInventoryParams) WithTimeout(timeout time.Duration) *SearchInventoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search inventory params
func (o *SearchInventoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search inventory params
func (o *SearchInventoryParams) WithContext(ctx context.Context) *SearchInventoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search inventory params
func (o *SearchInventoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search inventory params
func (o *SearchInventoryParams) WithHTTPClient(client *http.Client) *SearchInventoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search inventory params
func (o *SearchInventoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the search inventory params
func (o *SearchInventoryParams) WithLimit(limit *int32) *SearchInventoryParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search inventory params
func (o *SearchInventoryParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithSearchString adds the searchString to the search inventory params
func (o *SearchInventoryParams) WithSearchString(searchString *string) *SearchInventoryParams {
	o.SetSearchString(searchString)
	return o
}

// SetSearchString adds the searchString to the search inventory params
func (o *SearchInventoryParams) SetSearchString(searchString *string) {
	o.SearchString = searchString
}

// WithSkip adds the skip to the search inventory params
func (o *SearchInventoryParams) WithSkip(skip *int32) *SearchInventoryParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the search inventory params
func (o *SearchInventoryParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WriteToRequest writes these params to a swagger request
func (o *SearchInventoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.SearchString != nil {

		// query param searchString
		var qrSearchString string
		if o.SearchString != nil {
			qrSearchString = *o.SearchString
		}
		qSearchString := qrSearchString
		if qSearchString != "" {
			if err := r.SetQueryParam("searchString", qSearchString); err != nil {
				return err
			}
		}

	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
